package ca.sandstorm.luminance.input;

import javax.vecmath.Vector2f;
import android.util.FloatMath;
import android.view.GestureDetector;
import android.view.MotionEvent;


/**
 * Code from Replica Island (Android open source game project)
 * 
 * Class to handle event generated by touch event
 */
public class InputTouchScreen implements GestureDetector.OnGestureListener,
					GestureDetector.OnDoubleTapListener
{

    private int MAX_TOUCH_POINTS = 5;
    private InputXY mTouchPoints[];

    private MotionEvent _touchEvent;
    
    private int _touchMode = -1;
    public static final int NONE = -1;
    public static final int ON_SCROLL = 0;
    public static final int ON_FLING = 1;
    public static final int ON_SINGLE_TAP_CONFIRMED = 2;
    public static final int ON_DOUBLE_TAP_CONFIRMED = 3;
    public static final int ON_DOWN = 4;
    public static final int ON_PRESS = 5;
    public static final int ON_SINGLE_TAP = 6;
    
    private float _distanceX;
    private float _distanceY;
    private float _velocityX;
    private float _velocityY;
    
    public InputTouchScreen()
    {
	mTouchPoints = new InputXY[MAX_TOUCH_POINTS];
	for (int x = 0; x < MAX_TOUCH_POINTS; x++) {
	    mTouchPoints[x] = new InputXY();
	}
    }


    public void reset()
    {
	for (int x = 0; x < MAX_TOUCH_POINTS; x++) {
	    mTouchPoints[x].reset();
	}
    }


    public final void press(int index, float currentTime, float x, float y)
    {
	assert (index >= 0 && index < MAX_TOUCH_POINTS);
	if (index < MAX_TOUCH_POINTS) {
	    mTouchPoints[index].press(currentTime, x, y);
	}
    }


    public final void release(int index)
    {
	if (index < MAX_TOUCH_POINTS) {
	    mTouchPoints[index].release();
	}
    }


    public void resetAll()
    {
	for (int x = 0; x < MAX_TOUCH_POINTS; x++) {
	    mTouchPoints[x].reset();
	}
    }


    public boolean getTriggered(int index, float time)
    {
	boolean triggered = false;
	if (index < MAX_TOUCH_POINTS) {
	    triggered = mTouchPoints[index].getTriggered(time);
	}
	return triggered;
    }


    public boolean getPressed(int index)
    {
	boolean pressed = false;
	if (index < MAX_TOUCH_POINTS) {
	    pressed = mTouchPoints[index].getPressed();
	}
	return pressed;
    }


    public final void setVector(int index, Vector2f vector)
    {
	if (index < MAX_TOUCH_POINTS) {
	    mTouchPoints[index].setVector(vector);
	}
    }


    public final float getX(int index)
    {
	float magnitude = 0.0f;
	if (index < MAX_TOUCH_POINTS) {
	    magnitude = mTouchPoints[index].getX();
	}
	return magnitude;
    }


    public final float getY(int index)
    {
	float magnitude = 0.0f;
	if (index < MAX_TOUCH_POINTS) {
	    magnitude = mTouchPoints[index].getY();
	}
	return magnitude;
    }


    public final float getLastPressedTime(int index)
    {
	float time = 0.0f;
	if (index < MAX_TOUCH_POINTS) {
	    time = mTouchPoints[index].getLastPressedTime();
	}
	return time;
    }


    public InputXY findPointerInRegion(float regionX, float regionY,
	    float regionWidth, float regionHeight)
    {
	InputXY touch = null;
	for (int x = 0; x < MAX_TOUCH_POINTS; x++) {
	    final InputXY pointer = mTouchPoints[x];
	    if (pointer.getPressed() &&
		getTouchedWithinRegion(pointer.getX(), pointer.getY(), regionX,
				       regionY, regionWidth, regionHeight)) {
		touch = pointer;
		break;
	    }
	}
	return touch;
    }


    private final boolean getTouchedWithinRegion(float x, float y,
	    float regionX, float regionY, float regionWidth, float regionHeight)
    {
	return (x >= regionX && y >= regionY && x <= regionX + regionWidth && y <= regionY +
										   regionHeight);
    }


    public boolean getTriggered(float gameTime)
    {
	boolean triggered = false;
	for (int x = 0; x < MAX_TOUCH_POINTS && !triggered; x++) {
	    triggered = mTouchPoints[x].getTriggered(gameTime);
	}
	return triggered;
    }


    /**
     * Set the current movement event's object
     * 
     * @param touchEvent
     *            store the current object of movement event
     * @precond touchEvent != null
     * @postcond set this to represent touchEvent
     * 
     * @author Jonny
     */
    public void setTouchEvent(MotionEvent touchEvent)
    {
	this._touchEvent = touchEvent;
    }


    /**
     * Get the current movement event's object
     * 
     * @return Object used to report movement event
     * @precond None
     * @postcond return the MotionEvent object.
     * 
     * @author Jonny
     */
    public MotionEvent getTouchEvent()
    {
	return _touchEvent;
    }

    /**
     * Calculate the space distance between two fingers.
     * 
     * @return float distance of the two fingers.
     * @precond None
     * @postcond return distance between two fingers. distance >= 0.
     * 
     * @author Jonny
     */
    public float getPinchDistance()
    {
	float x = _touchEvent.getX(0) - _touchEvent.getX(1);
	float y = _touchEvent.getY(0) - _touchEvent.getY(1);
	return FloatMath.sqrt(x * x + y * y);
    }


    @Override
    public boolean onDoubleTap(MotionEvent e)
    {
	// TODO Auto-generated method stub
	return false;
    }


    @Override
    public boolean onDoubleTapEvent(MotionEvent e)
    {
	setTouchMode(ON_DOUBLE_TAP_CONFIRMED);
	return false;
    }


    @Override
    public boolean onSingleTapConfirmed(MotionEvent e)
    {
	setTouchMode(ON_SINGLE_TAP_CONFIRMED);
	return true;
    }


    @Override
    public boolean onDown(MotionEvent e)
    {
	setTouchMode(ON_DOWN);
	return true;
    }


    @Override
    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
	    float velocityY)
    {
	setTouchMode(ON_FLING);
	_velocityX = velocityX;
	_velocityY = velocityY;
	return true;
    }


    @Override
    public void onLongPress(MotionEvent e)
    {
	// TODO Auto-generated method stub
	
    }


    @Override
    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
	    float distanceY)
    {
	setTouchMode(ON_SCROLL);
	_distanceX = distanceX;
	_distanceY = distanceY;
	
	// TODO Auto-generated method stub
	return true;
    }


    @Override
    public void onShowPress(MotionEvent e)
    {
	setTouchMode(ON_PRESS);
	
    }


    @Override
    public boolean onSingleTapUp(MotionEvent e)
    {
	setTouchMode(ON_SINGLE_TAP);
	return true;
    }
    
    public void setTouchMode (int mode)
    {
	_touchMode = mode;
    }
    
    public int getTouchMode()
    {
	return _touchMode;
    }
    
    public float getDistanceX()
    {
	return _distanceX;
    }
    
    public float getDistanceY()
    {
	return _distanceY;
    }
    
    public float getVelocityX()
    {
	return _velocityX;
    }
    
    public float getVelocityY()
    {
	return _velocityY;
    }
    
}
